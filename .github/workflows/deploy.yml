name: Deploy to EC2

on:
  push:
    branches:
      - main  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Checkout code
        uses: actions/checkout@v2

      # Step 2: Set up Docker
      - name: Set up Docker
        uses: docker/setup-buildx-action@v1

      # Step 3: Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Step 4: Install Python dependencies
      - name: Install requirements
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install -r requirements.txt

      # Step 5: Build the Docker image with environment variables from secrets
      - name: Build Docker Image
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          docker-compose build

      # Step 6: Run Tests
      - name: Run Tests
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
        run: |
          docker-compose run web python manage.py test

      # Step 7: Deploy to EC2
      - name: Deploy to EC2
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          ALPHA_VANTAGE_API_KEY: ${{ secrets.ALPHA_VANTAGE_API_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          EC2_KEY: ${{ secrets.EC2_KEY }}  
          EC2_HOST: ${{ secrets.EC2_HOST }} 
        run: |
          # Decode the PEM key
          echo $EC2_KEY | base64 --decode > ec2_key.pem
          chmod 600 ec2_key.pem  # Secure the key
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no ubuntu@$EC2_HOST "
            set -e  # Exit immediately if a command fails

            # Navigate to the app directory
            cd ~/blockhouse_app || { echo 'App directory does not exist'; exit 1; }

            # Pull the latest changes
            git pull origin main || { echo 'Git pull failed'; exit 1; }

            # Stop and remove existing containers
            docker-compose down || { echo 'Docker-compose down failed'; exit 1; }

            # Create or update the .env file with environment variables
            echo 'DB_NAME=$DB_NAME' >> .env
            echo 'DB_USER=$DB_USER' >> .env
            echo 'DB_PASSWORD=$DB_PASSWORD' >> .env
            echo 'DB_HOST=$DB_HOST' >> .env
            echo 'DB_PORT=$DB_PORT' >> .env
            echo 'ALPHA_VANTAGE_API_KEY=$ALPHA_VANTAGE_API_KEY' >> .env
            
            # Start the application with the updated Docker configuration
            docker-compose up -d || { echo 'Docker-compose up failed'; exit 1; }
          "
